
CYMP_AFU4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a2  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d8  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  0000192b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  8e:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initialize_ports>:
void initialize_ports(void)
{
	//--Entradas

    //--Salidas
	DDRB |=_BV(a);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(b);
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(c);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(d);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(e);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(f);
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(g);
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	84 b9       	out	0x04, r24	; 4
	
	DDRD |=_BV(LedIndicador);
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8a b9       	out	0x0a, r24	; 10
	
	PORTD = 0x00; //-Por seguridad iniciamos en 0
  c6:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; //-Por seguridad iniciamos en 0
  c8:	15 b8       	out	0x05, r1	; 5
  ca:	08 95       	ret

000000cc <ADC_init>:
// el ADC                                                  *
//**********************************************************
void ADC_init(void)
{
	//Avcc como pin de referencia
	ADMUX &=~ (1<<REFS1);
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8f 77       	andi	r24, 0x7F	; 127
  d4:	80 83       	st	Z, r24
	ADMUX |=  (1<<REFS0);
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	
	//8 bits
	ADMUX |= (1<<ADLAR);
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	
    //PIN ADC4
    ADMUX &=~ (1<<MUX3);
  e2:	80 81       	ld	r24, Z
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	80 83       	st	Z, r24
    ADMUX |=  (1<<MUX2);
  e8:	80 81       	ld	r24, Z
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	80 83       	st	Z, r24
    ADMUX &=~ (1<<MUX1);
  ee:	80 81       	ld	r24, Z
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	80 83       	st	Z, r24
    ADMUX &=~ (1<<MUX0);
  f4:	80 81       	ld	r24, Z
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	80 83       	st	Z, r24
	
	//Freeruning
	ADCSRA |= (1<<ADATE);
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 62       	ori	r24, 0x20	; 32
 102:	80 83       	st	Z, r24
	
	//Habilitar interrupción 
	ADCSRA |= (1<<ADIE);
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
	
	//velocidad de muestreo
	// 1 MHz clock / 8 = 125 kHz ADC clock debe de estar entre 50 - 200Khz
	ADCSRA &=~ (1<<ADPS0);
 10a:	80 81       	ld	r24, Z
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS1);
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS2);
 116:	80 81       	ld	r24, Z
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <ADC_on>:
//ADC_init : Leer y convertir señal análoga                *
//**********************************************************
void ADC_on(void)
{
	//Encendemos el ADC
	ADCSRA |= (1<<ADEN);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 68       	ori	r24, 0x80	; 128
 126:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	83 ec       	ldi	r24, 0xC3	; 195
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <ADC_on+0xe>
 130:	00 c0       	rjmp	.+0      	; 0x132 <ADC_on+0x14>
 132:	00 00       	nop
	_delay_ms(10);
	// Iniciar la conversión
	ADCSRA |= (1 << ADSC);
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <main>:

/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
    cli();
 13c:	f8 94       	cli
    initialize_ports(); // va hacía la inicialización
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <initialize_ports>
    ADC_init();
 142:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_init>
    sei();
 146:	78 94       	sei
    ADC_on();
 148:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_on>
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x10>

0000014e <__vector_21>:
	_delay_ms(10);
	// Iniciar la conversión
	ADCSRA |= (1 << ADSC);
}
ISR(ADC_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	//0 a 5V -> 0 a 255bits
	
	//0 a 50 Letra "L" de Low
	if ( (ADCH >= 0) && (ADCH <= 50) )
 160:	e9 e7       	ldi	r30, 0x79	; 121
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 81       	ld	r24, Z
 168:	83 33       	cpi	r24, 0x33	; 51
 16a:	20 f4       	brcc	.+8      	; 0x174 <__vector_21+0x26>
	{
		PORTB = numeros[0];
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	85 b9       	out	0x05, r24	; 5
 172:	15 c0       	rjmp	.+42     	; 0x19e <__vector_21+0x50>
	
	//51 a 100 ? Letra "K" de OK
	}else if((ADCH >= 51) && (ADCH <= 100)){
 174:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 178:	83 33       	cpi	r24, 0x33	; 51
 17a:	40 f0       	brcs	.+16     	; 0x18c <__vector_21+0x3e>
 17c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 180:	85 36       	cpi	r24, 0x65	; 101
 182:	20 f4       	brcc	.+8      	; 0x18c <__vector_21+0x3e>
		PORTB = numeros[1];
 184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	85 b9       	out	0x05, r24	; 5
 18a:	09 c0       	rjmp	.+18     	; 0x19e <__vector_21+0x50>
		
	//101 a 255 ? Letra "h" de High
	}else if((ADCH >= 101) && (ADCH <= 255)){
 18c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 190:	85 36       	cpi	r24, 0x65	; 101
 192:	28 f0       	brcs	.+10     	; 0x19e <__vector_21+0x50>
 194:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		PORTB = numeros[2];
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19c:	85 b9       	out	0x05, r24	; 5
	} 
	
	PORTD ^= (1<<LedIndicador); //Encender y apagar led indicador
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	89 27       	eor	r24, r25
 1a4:	8b b9       	out	0x0b, r24	; 11
	
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
