
LCYMP_P5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007aa  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000670  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  00001182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_ports>:
//**********************************************************
void initialize_ports(void)
{

    //--Salidas
	DDRD |=_BV(a);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(b);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(c);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(d);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(e);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(f);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(g);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8a b9       	out	0x0a, r24	; 10
	
	DDRB |=_BV(LedIndicador);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	84 b9       	out	0x04, r24	; 4
	
	PORTB = 0x00; //-Por seguridad iniciamos en 0
  d6:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00; //-Por seguridad iniciamos en 0
  d8:	1b b8       	out	0x0b, r1	; 11
  da:	08 95       	ret

000000dc <initialize_timer_led>:
//initialize_timer_led : inicializa el timer para controlar Led
//**********************************************************************
void initialize_timer_led(void)
{
    //Modo de operacíon configurado como CTC
    TCCR0A &=~ (1<<WGM00);// 0 en el bit WGM00
  dc:	84 b5       	in	r24, 0x24	; 36
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	84 bd       	out	0x24, r24	; 36
    TCCR0A |=  (1<<WGM01);// 1 en el bit WGM01
  e2:	84 b5       	in	r24, 0x24	; 36
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	84 bd       	out	0x24, r24	; 36
    TCCR0B &=~ (1<<WGM02);// 0 en el bit WGM02
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	85 bd       	out	0x25, r24	; 37
    OCR0A = 97; //Registro de 8 bits donde se pone el numero a comparar
  ee:	81 e6       	ldi	r24, 0x61	; 97
  f0:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);//Se pone un 1 en el bit OCIE0A del registro 
  f2:	ee e6       	ldi	r30, 0x6E	; 110
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <timer_led_on>:
//timer_led_on: Enciende el timer para controlar Led
//**********************************************************************
void timer_led_on(void)
{

    TCNT0 = 0; // Registro de 8 bits que lleva el conteo del timer_0
  fe:	16 bc       	out	0x26, r1	; 38
    //Prescaler configurado en 1024
    TCCR0B |=  (1<<CS00);// 1 en el bit CS00
 100:	85 b5       	in	r24, 0x25	; 37
 102:	81 60       	ori	r24, 0x01	; 1
 104:	85 bd       	out	0x25, r24	; 37
    TCCR0B &=~ (1<<CS01);// 0 en el bit CS01
 106:	85 b5       	in	r24, 0x25	; 37
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	85 bd       	out	0x25, r24	; 37
    TCCR0B |=  (1<<CS02);// 1 en el bit CS02
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	85 bd       	out	0x25, r24	; 37
 112:	08 95       	ret

00000114 <initialize_timer_i>:
//initialize_timer1 : inicializa el timer para el contador del display
//**********************************************************************
void initialize_timer_i(void)
{
//Modo de operacíon configurado como CTC
    TCCR1A &=~ _BV(WGM10);// 0 en el bit WGM10
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	80 83       	st	Z, r24
    TCCR1A &=~ _BV(WGM11); // 0 en el bit WGM11
 11e:	80 81       	ld	r24, Z
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	80 83       	st	Z, r24
    TCCR1B |=  _BV(WGM12); // 1 en el bit WGM12
 124:	e1 e8       	ldi	r30, 0x81	; 129
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 83       	st	Z, r24
    TCCR1B &=~ _BV(WGM13);// 0 en el bit WGM13
 12e:	80 81       	ld	r24, Z
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	80 83       	st	Z, r24
    OCR1A = 488; //Registro de 8 bits donde se pone el numero a comparar
 134:	88 ee       	ldi	r24, 0xE8	; 232
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TIMSK1 |= (1<<OCIE1A); //Se pone un 1 en el bit OCIE1A del registro
 140:	ef e6       	ldi	r30, 0x6F	; 111
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <timer_i_on>:
//**********************************************************************
//timer_i_on: inicializa el timer para el contador del display
//**********************************************************************
void timer_i_on(void)
{
	TCNT1 = 0;// Registro de 16 bits que lleva el conteo del timer_0
 14c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 150:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	//Prescaler configurado en 1024
	TCCR1B |=  (1<<CS10);// 1 en el bit CS10
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
	TCCR1B &=~ (1<<CS11);// 0 en el bit CS11
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	80 83       	st	Z, r24
	TCCR1B |=  (1<<CS12);// 1 en el bit CS12
 164:	80 81       	ld	r24, Z
 166:	84 60       	ori	r24, 0x04	; 4
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <main>:

/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
    cli(); //Deshabilitamos interrupciones 
 16c:	f8 94       	cli
	initialize_ports(); // va hacía la inicialización de puertos
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_ports>
	initialize_timer_led();// va hacía la inicialización del TIMER para controlar Led
 172:	0e 94 6e 00 	call	0xdc	; 0xdc <initialize_timer_led>
	initialize_timer_i();// va hacía la inicialización del TIMER para controlar Contador del display
 176:	0e 94 8a 00 	call	0x114	; 0x114 <initialize_timer_i>
	sei(); //Habilitamos interrupciones
 17a:	78 94       	sei
	timer_led_on(); //Encendemos Timer0
 17c:	0e 94 7f 00 	call	0xfe	; 0xfe <timer_led_on>
	timer_i_on(); //Encendemos Timer0
 180:	0e 94 a6 00 	call	0x14c	; 0x14c <timer_i_on>
//--Ejecución
    while (1) //loop infinito
    {
		
		//PORTB |=_BV(LedIndicador); //Encender
		PORTD = numeros[i];
 184:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <i>
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	8b b9       	out	0x0b, r24	; 11
		
		if (i == 10) {
 192:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i>
 196:	8a 30       	cpi	r24, 0x0A	; 10
 198:	a9 f7       	brne	.-22     	; 0x184 <main+0x18>
			i = 0;
 19a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <i>
 19e:	f2 cf       	rjmp	.-28     	; 0x184 <main+0x18>

000001a0 <__vector_14>:
//**********************************************************************
//**********************************************************************
//TIMER_0
//**********************************************************************
ISR (TIMER0_COMPA_vect)// Vector de interrupción para el Timer0 (0.1s)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
    PORTB ^= (1<<LedIndicador); //Encender y apagar led indicador
 1ae:	95 b1       	in	r25, 0x05	; 5
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	89 27       	eor	r24, r25
 1b4:	85 b9       	out	0x05, r24	; 5
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_11>:
//**********************************************************************
//TIMER_1
//**********************************************************************
ISR (TIMER1_COMPA_vect)// Vector de interrupción para el Timer0 (0.5s)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
	timer++;
 1d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if(timer == 2){ //Cada 2 Seg Aumenta
 1da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <__vector_11+0x2c>
		i++;
 1e2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i>
		timer = 0;
 1ec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
