
LCYMP_P3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initialize_ports>:
//                                                         *
//**********************************************************
void initialize_ports(void)
{
	//Entradas
	DDRD  &=~(1<<boton_1);  
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f 77       	andi	r24, 0x7F	; 127
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD |=(1<<boton_1); //pull-up 
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8b b9       	out	0x0b, r24	; 11
	
	DDRD  &=~(1<<boton_2); 
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	8a b9       	out	0x0a, r24	; 10
	PORTD &=~(1<<boton_2); // pull-down al poner la
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	8b b9       	out	0x0b, r24	; 11

		
	//Salidas
	//Declaramos puertos de salida
	DDRB  |=_BV(LED_1);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	84 b9       	out	0x04, r24	; 4
	DDRB  |=_BV(LED_2);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	84 b9       	out	0x04, r24	; 4
	DDRC  |=_BV(LED_3);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	87 b9       	out	0x07, r24	; 7
	
	//Por seguridad se inicializa en 0
	PORTB &=~_BV(LED_1); 
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	85 b9       	out	0x05, r24	; 5
	PORTB &=~_BV(LED_2);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 7e       	andi	r24, 0xEF	; 239
  b4:	85 b9       	out	0x05, r24	; 5
	PORTC &=~_BV(LED_3);
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	08 95       	ret

000000be <main>:
//--Espacio para declarar funciones
/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
    initialize_ports(); // va hacía la inicialización de puertos
  be:	0e 94 40 00 	call	0x80	; 0x80 <initialize_ports>
	{
		//Boton 1 - set = push esta en 0
		//Boton 2 - Clear = push esta en 1
	
		//Logica AND
		if (bit_is_clear(PIND,boton_1) && bit_is_set(PIND,boton_2)) {
  c2:	4f 99       	sbic	0x09, 7	; 9
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <main+0x14>
  c6:	48 9b       	sbis	0x09, 0	; 9
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <main+0x14>
			PORTB |=_BV(LED_1); //Encender
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x1a>
		}else{
			PORTB &=~_BV(LED_1);//Apagar
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	85 b9       	out	0x05, r24	; 5
		}

		//Logica OR
		if (bit_is_clear(PIND,boton_1) || bit_is_set(PIND,boton_2)) {                             
  d8:	4f 9b       	sbis	0x09, 7	; 9
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x22>
  dc:	48 9b       	sbis	0x09, 0	; 9
  de:	04 c0       	rjmp	.+8      	; 0xe8 <main+0x2a>
			PORTB |=_BV(LED_2); //Encender			
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x30>
		}else{
			PORTB &=~_BV(LED_2); //Apagar
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	85 b9       	out	0x05, r24	; 5
		}   
		
		//Logica XOR
		if ( bit_is_clear(PIND,boton_1) == bit_is_set(PIND,boton_2) ) {
  ee:	99 b1       	in	r25, 0x09	; 9
  f0:	99 1f       	adc	r25, r25
  f2:	99 27       	eor	r25, r25
  f4:	99 1f       	adc	r25, r25
  f6:	89 b1       	in	r24, 0x09	; 9
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	98 17       	cp	r25, r24
  fc:	21 f0       	breq	.+8      	; 0x106 <main+0x48>
			PORTC &=~_BV(LED_3); //Apagar
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	88 b9       	out	0x08, r24	; 8
 104:	de cf       	rjmp	.-68     	; 0xc2 <main+0x4>
		}else{
			PORTC |=_BV(LED_3); //Encender
 106:	88 b1       	in	r24, 0x08	; 8
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	da cf       	rjmp	.-76     	; 0xc2 <main+0x4>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
