/****************************************************
 * LLENAR ESTE ESPACIO CON LOS SIGUIENTES DATOS:    *
 * Nombre:                                          *
 * Hora clase:                                      *
 * Día:                                             *
 * N° de lista:                                     *
 * N° de Equipo:                                    *
 * Dispositivo:                                     *
 * Rev:                                             *
 * Propósito de la actividad:                       *
 * Utilizar los puertos de salida del               *
 * microcontrolador junto con funciones de tiempo.  *
 *                                    Fecha:        *
 ***************************************************/ 
/*atmega328P PIN - OUT*/
/*       PIN - OUT
         atmega328P
	      -------                                
	PC6  |1     28| PC5                         
	PD0  |2     27| PC4                          
	PD1  |3     26| PC3                          
	PD2  |4     25| PC2                          
	PD3  |5     24| PC1
	PD4  |6     23| PC0                          
	VCC  |7     22| GND                         
	GND  |8     21| AREF                          
	PB6  |9     20| AVCC                          
	PB7  |10    19| PB5                          
	PD5  |11    18| PB4                          
	PD6  |12    17| PB3
	PD7  |13    16| PB2
	PB0  |14    15| PB1
	      --------
*/
/*atmega328P PIN FUNCTIONS*/
 /*
 atmega328P PIN FUNCTIONS
 pin   function              name    pin     function              name
 1     !RESET/PCINT14        PC6     15      PCINT1/OC1A           PB1
 2     RxD/PCINT16           PD0     16      PCINT2/OC1B/SS        PB2
 3     TxD/PCINT17           PD1     17      PCINT3/OC2A/MOSI      PB3
 4     INT0/PCINT18          PD2     18      PCINT4/MISO           PB4
 5     INT1/PCINT19/OC2B     PD3     19      PCINT5/SCK            PB5
 6     PCINT20               PD4     20      ANALOG VCC            AVCC
 7     +5v                   VCC     21      ANALOG REFERENCE      AREF
 8     GND                   GND     22      GND                   GND
 9     XTAL1/PCINT6          PB6     23      PCINT8/ADC0           PC0
 10	   XTAL2/PCINT7          PB7     24      PCINT9/ADC1           PC1
 11    PCINT21/OC0B          PD5     25      PCINT10/ADC2          PC2
 12	   PCINT22/OC0A/AIN0     PD6     26      PCINT11/ADC3          PC3
 13    PCINT23/AIN1          PD7     27      PCINT12/ADC4/SDA      PC4
 14    PCINT0/AIN1           PB0     28      PCINT13/ADC5/SCL      PC5
 */
/*******************Bibliotecas****************************/
#include <avr/io.h> //se incluyen las Bibliotecas de E/S del AVR atmega328P

/*****************Macros y constantes**********************/
#define F_CPU 1000000UL //1 Mhz

//#define _BV(bit) (1<<bit) // macro (var)
// ( recorre un 1 hasta la posición del bit) ya se encuentra en la librería
//#define bit_is_set(sfr,bit) (_SFR_BYTE(sfr) & _BV(bit))
//#define bit_is_clear(sfr,bit) (!(_SFR_BYTE(sfr) & _BV(bit)))

//Se asignan nombres a los pines a utilizar
//#define + nombre + pin o valor
//Entradas
#define Switch_1 PIND7 // PIN 2
#define Switch_2 PIND0 // PIN 13

//Salidas
#define LED_1 PORTC0 // PIN 23
#define LED_2 PORTB0 // PIN 14
#define LED_3 PORTB4 // PIN 18

/***********************Funciones**************************/
/*********************Declaracion de Funciones*************/
void initialize_ports(void); // Función para inicializar por puertos

/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
	initialize_ports(); // va hacía la inicialización

//--Ejecución
	while (1)
	{
		
	//Switch_1 PULL - UP INPUT & LED_ 1 SOURCE OUTPUT*******************
		// PIND lee el estado de las entradas del puerto D, (<< shift register)
		if ((PIND &(1<< Switch_1)) == 0) // (0b000000X & 0b000001) 
		//X = es valor de la entrada esperada en el D0
		// si la AND resulta 0
		// (usando lógica negativa debido a la resitencia pull-up definida)
		{   
			PORTC |= 0x01; // Deja el bit 0 del puerto C con un 1 lógico
			// PORTC = PORTC | 0b 0000 0001
		}
		else
		// si la AND resulta 1 
		//(normalmente se encuentra en 1 debido a la resitencia pull-up definida)
		{
			PORTC &=~_BV(LED_1);// Pone un 0 en el bit 0 en el PUERTO C (CLEAR)
			                // mediante la macro _BV
		}                   // PORTC = PORTC &~(0b0000001)
//**Tambien se pueden utilizar las macros bit_is_set(PINC,PINC#) pregunta por un "1" 
//           y                            bit_is_clear(PINC,PINC#) pregunta por un "0"	
	
	//Switch_2 PULL - DOWN INPUT & LED_ 2 SINK OUTPUT*********************
		// Macro bit_is_set sirve para ver si hay un "1"
		if (bit_is_set(PIND,Switch_2)) // 
		{                             
			PORTB &=~_BV(LED_2); // Apaga el bit 0 del PORTB
		}
		else 
		{              
			PORTB |=_BV(LED_2); //  Enciende Apaga el bit 0 del PORTB
		}   
		
//**Para utilizar el operador lógico AND se debe usar el &&,
//  si se quiere hacer una AND por cada bit se utiliza &
 && ||
// LED_3 se enciende si los dos switch están presionados*******************
		if (bit_is_clear(PIND,Switch_1) && bit_is_set(PIND,Switch_2))
		 // Se utiliza un AND lógica (&&)
		{
			PORTB |=_BV(LED_3); // Enciende el bit 4 del PORTB
		}
		else
		{
			PORTB &=~_BV(LED_3); // Apaga el bit 4 del PORTB
		}           
			
	} // END loop infinito
} // END MAIN


//**********************************************************************
//Definición de funciónes
//**********************************************************************
//**********************************************************************
//initialize_ports : inicializa los puertos de entrada o salida
//***********************************************************************
void initialize_ports(void)
{
	//Entradas***************************************************************
	//Switch_1
	//DDRD = 0x7F; //0b01111111
	DDRD  &=~(1<<Switch_1);  // Declara solamente el bit 7 del DDRD como entrada
	//DDRD  &=~(1<<PIND2);
	PORTD |=(1<<Switch_1); // Activa la resistencia pull-up al poner la entrada
	// en 1 del bit 7 del puerto D
	
	//Switch_2
	DDRD  &=~(1<<Switch_2); // Declara solamente el bit 0 del DDRD como entrada
	PORTD &=~(1<<Switch_2);// Activa la resistencia pull-down al poner la
	//entrada en 0 del bit 0 del puerto D
	
	//Salidas****************************************************************
	//LED_1
	DDRC  |=_BV(LED_1);// Pone un 1 en el bit 0 del Registro C (SET)
	//mediante la macro _BV
	PORTC &=~_BV(LED_1);// Inicializa la salida en 0 lógico
	
	//LED_2
	DDRB  |=_BV(LED_2);// Pone un 1 en el bit 0 del Registro B (SET)
	PORTB &=~_BV(LED_2);// Inicializa la salida en 0
	
	//LED_3
	DDRB  |=_BV(LED_3);// Pone un 1 en el bit 0 del Registro C (SET) mediante la macro _BV
	PORTB &=~_BV(LED_3);// Inicializa la salida en 0
}


