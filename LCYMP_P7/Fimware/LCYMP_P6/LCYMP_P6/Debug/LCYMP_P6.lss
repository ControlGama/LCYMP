
LCYMP_P6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000742  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000670  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_1>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_ports>:
//salida                                                   *
//**********************************************************
void initialize_ports(void)
{
	//--Entradas
	DDRD &=~ _BV(ButtonAdd);  //INT 0 como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD|=_BV(ButtonAdd); // Push button con pull - up (INT 0)
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8b b9       	out	0x0b, r24	; 11

	DDRD &=~ _BV(ButtonSub); // INT 1 como entrada
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD|=_BV(ButtonSub); // Push button con pull - up (INT 1)
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	8b b9       	out	0x0b, r24	; 11
	
    //--Salidas
	DDRB |=_BV(a);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(b);
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(c);
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(d);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(e);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(f);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(g);
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	84 b9       	out	0x04, r24	; 4
	
	PORTB = 0x00; //-Por seguridad iniciamos en 0
  e8:	15 b8       	out	0x05, r1	; 5
  ea:	08 95       	ret

000000ec <initialize_interrupt>:
//**********************************************************************
void initialize_interrupt(void)
{
//INT0
    //Modo
    EICRA &=~ (1<<ISC00);   // INT0 configurado = LOW LEVEL
  ec:	e9 e6       	ldi	r30, 0x69	; 105
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
    EICRA &=~ (1<<ISC01);   // INT0 configurado = LOW LEVEL
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	80 83       	st	Z, r24
    //Activacion
    EIMSK |= (1<<INT0);     // INT0 activado
  fc:	8d b3       	in	r24, 0x1d	; 29
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	8d bb       	out	0x1d, r24	; 29
//INT1
    //Modo
    EICRA &=~ (1<<ISC10);   // INT1 configurado = LOW LEVEL
 102:	80 81       	ld	r24, Z
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	80 83       	st	Z, r24
    EICRA &=~ (1<<ISC11);   // INT1 configurado = LOW LEVEL
 108:	80 81       	ld	r24, Z
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	80 83       	st	Z, r24
    //Activacion
    EIMSK |= (1<<INT1);     // INT1 activado
 10e:	8d b3       	in	r24, 0x1d	; 29
 110:	82 60       	ori	r24, 0x02	; 2
 112:	8d bb       	out	0x1d, r24	; 29
 114:	08 95       	ret

00000116 <main>:

/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
    cli(); //Deshabilitamos interrupciones 
 116:	f8 94       	cli
	initialize_ports(); // va hacía la inicialización de puertos
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_ports>
	initialize_interrupt();// va hacía la inicialización del TIMER para controlar Led
 11c:	0e 94 76 00 	call	0xec	; 0xec <initialize_interrupt>
	sei(); //Habilitamos interrupciones
 120:	78 94       	sei
//--Ejecución
    while (1) //loop infinito
    {
		
		//PORTB |=_BV(LedIndicador); //Encender
		PORTB = numeros[i];
 122:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e0 50       	subi	r30, 0x00	; 0
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	85 b9       	out	0x05, r24	; 5
		
		//i++;
		if (i == 10) {
 130:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	a9 f7       	brne	.-22     	; 0x122 <main+0xc>
			i = 0;
 138:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 13c:	f2 cf       	rjmp	.-28     	; 0x122 <main+0xc>

0000013e <__vector_1>:
}
//**********************************************************************
//ISR : 
//**********************************************************************
ISR (INT0_vect) // Vector de interrupción INT0
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
    i++;
 14a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	if (i == 10) {
 154:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 158:	8a 30       	cpi	r24, 0x0A	; 10
 15a:	11 f4       	brne	.+4      	; 0x160 <__vector_1+0x22>
		i = 0;
 15c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
}
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_2>:
ISR (INT1_vect) // Vector de interrupción INT1
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
	
	if (i == 0) {
 178:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 17c:	81 11       	cpse	r24, r1
 17e:	03 c0       	rjmp	.+6      	; 0x186 <__vector_2+0x1a>
		i = 10;
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	}
	
    i--;
 186:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
