
LCYMCP_P2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000758  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000661  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay1S>:

/*******************Variables globales*********************/
//--Espacio para declarar variables globales
/***********************Funciones**************************/
//--Espacio para Establecer funciones
void delay1S(){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <delay1S+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	//Esta funcion sirve para hacer un retardo 
	volatile unsigned int i;
	for (i = 0; i<55555; i++);
  8a:	1a 82       	std	Y+2, r1	; 0x02
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	05 c0       	rjmp	.+10     	; 0x9a <delay1S+0x1a>
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	9a 81       	ldd	r25, Y+2	; 0x02
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	9a 83       	std	Y+2, r25	; 0x02
  98:	89 83       	std	Y+1, r24	; 0x01
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	9a 81       	ldd	r25, Y+2	; 0x02
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	99 4d       	sbci	r25, 0xD9	; 217
  a2:	b0 f3       	brcs	.-20     	; 0x90 <delay1S+0x10>

}
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <initialize_ports>:
{
    //--Entradas
    
    
    //--Salidas
    DDRD = 0x7F; //-Declaramos 7 puertos de salida
  ae:	8f e7       	ldi	r24, 0x7F	; 127
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //-Por seguridad iniciamos en 0
  b2:	1b b8       	out	0x0b, r1	; 11
  b4:	08 95       	ret

000000b6 <main>:
//--Espacio para declarar funciones
/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
    initialize_ports(); // va hacía la inicialización de puertos
  b6:	0e 94 57 00 	call	0xae	; 0xae <initialize_ports>
//--Ejecución
    while (1) //loop infinito
    {
		
		//Secuencia hacia abajo
		PORTD = (1<<DDD0);
  ba:	c1 e0       	ldi	r28, 0x01	; 1
  bc:	cb b9       	out	0x0b, r28	; 11
		delay1S();
  be:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD1);
  c2:	d2 e0       	ldi	r29, 0x02	; 2
  c4:	db b9       	out	0x0b, r29	; 11
		delay1S();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD2);
  ca:	14 e0       	ldi	r17, 0x04	; 4
  cc:	1b b9       	out	0x0b, r17	; 11
		delay1S();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD3);
  d2:	08 e0       	ldi	r16, 0x08	; 8
  d4:	0b b9       	out	0x0b, r16	; 11
		delay1S();
  d6:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD4);
  da:	68 94       	set
  dc:	ff 24       	eor	r15, r15
  de:	f4 f8       	bld	r15, 4
  e0:	fb b8       	out	0x0b, r15	; 11
		delay1S();
  e2:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD5);
  e6:	68 94       	set
  e8:	ee 24       	eor	r14, r14
  ea:	e5 f8       	bld	r14, 5
  ec:	eb b8       	out	0x0b, r14	; 11
		delay1S();
  ee:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD6);
  f2:	68 94       	set
  f4:	dd 24       	eor	r13, r13
  f6:	d6 f8       	bld	r13, 6
  f8:	db b8       	out	0x0b, r13	; 11
		delay1S();
  fa:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		
		//Secuencia hacia arriba
		PORTD = (1<<DDD6);
  fe:	db b8       	out	0x0b, r13	; 11
		delay1S();
 100:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD5);
 104:	eb b8       	out	0x0b, r14	; 11
		delay1S();
 106:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD4);
 10a:	fb b8       	out	0x0b, r15	; 11
		delay1S();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD3);
 110:	0b b9       	out	0x0b, r16	; 11
		delay1S();
 112:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD2);
 116:	1b b9       	out	0x0b, r17	; 11
		delay1S();
 118:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD1);
 11c:	db b9       	out	0x0b, r29	; 11
		delay1S();
 11e:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
		PORTD = (1<<DDD0);
 122:	cb b9       	out	0x0b, r28	; 11
		delay1S();
 124:	0e 94 40 00 	call	0x80	; 0x80 <delay1S>
 128:	c8 cf       	rjmp	.-112    	; 0xba <main+0x4>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
