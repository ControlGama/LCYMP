
LCYMP_P4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000771  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  0000105b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8e:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initialize_ports>:
//**********************************************************
void initialize_ports(void)
{
    //--Entradas
    // Declaramos puerto de entrada para boton
    DDRB  &= ~_BV(BTN1);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(BTN1); //Activamos PULL UP
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 b9       	out	0x05, r24	; 5
	    
    //--Salidas
	DDRD |=_BV(a);
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(b);
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(c);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(d);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(e);
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(f);
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	8a b9       	out	0x0a, r24	; 10
	DDRD |=_BV(g);
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8a b9       	out	0x0a, r24	; 10
    
	PORTD = 0x00; //-Por seguridad iniciamos en 0
  cc:	1b b8       	out	0x0b, r1	; 11
  ce:	08 95       	ret

000000d0 <main>:
void initialize_ports(void);
/*******************Programa principal*********************/
int main(void)
{
//--Inicialización
    initialize_ports(); // va hacía la inicialización de puertos
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <initialize_ports>
	uint8_t i = 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0xa>
		
		if (bit_is_set(PINB,BTN1) ){
			if (i < 15) {
				i++;
			}else{
				i = 0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
	
//--Ejecución
    while (1) //loop infinito
    {
      
		PORTD = numeros[i];
  da:	e8 2f       	mov	r30, r24
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	90 81       	ld	r25, Z
  e4:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f e9       	ldi	r18, 0x9F	; 159
  e8:	36 e8       	ldi	r19, 0x86	; 134
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x26>
  f6:	00 00       	nop
		_delay_ms(500);
		
		if (bit_is_set(PINB,BTN1) ){
  f8:	18 9b       	sbis	0x03, 0	; 3
  fa:	ef cf       	rjmp	.-34     	; 0xda <main+0xa>
			if (i < 15) {
  fc:	8f 30       	cpi	r24, 0x0F	; 15
  fe:	60 f7       	brcc	.-40     	; 0xd8 <main+0x8>
				i++;
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	eb cf       	rjmp	.-42     	; 0xda <main+0xa>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
