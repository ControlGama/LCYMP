
CYMP_AFU3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000768  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000670  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  9e:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_ports>:
//salida                                                   *
//**********************************************************
void initialize_ports(void)
{
	//--Entradas
	DDRD &=~ _BV(ButtonSpeed);  //INT 0 como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD|=_BV(ButtonSpeed); // Push button con pull - up (INT 0)
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	8b b9       	out	0x0b, r24	; 11

	//DDRD &=~ _BV(ButtonSub); // INT 1 como entrada
	//PORTD|=_BV(ButtonSub); // Push button con pull - up (INT 1)
	
	//--Salidas
	DDRB |=_BV(a);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(b);
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(c);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(d);
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(e);
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(f);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	84 b9       	out	0x04, r24	; 4
	DDRB |=_BV(g);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	84 b9       	out	0x04, r24	; 4
	
	PORTB = 0x00; //-Por seguridad iniciamos en 0
  dc:	15 b8       	out	0x05, r1	; 5
  de:	08 95       	ret

000000e0 <initialize_timer>:
//initialize_timer_led : inicializa el timer para controlar Led
//**********************************************************************
void initialize_timer(void)
{
    //Modo de operacíon configurado como CTC
    TCCR0A &=~ (1<<WGM00);// 0 en el bit WGM00
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	84 bd       	out	0x24, r24	; 36
    TCCR0A |=  (1<<WGM01);// 1 en el bit WGM01
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	84 bd       	out	0x24, r24	; 36
    TCCR0B &=~ (1<<WGM02);// 0 en el bit WGM02
  ec:	85 b5       	in	r24, 0x25	; 37
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	85 bd       	out	0x25, r24	; 37
    OCR0A = 97; //Registro de 8 bits donde se pone el numero a comparar
  f2:	81 e6       	ldi	r24, 0x61	; 97
  f4:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);//Se pone un 1 en el bit OCIE0A del registro 
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <timer_on>:
//timer_led_on: Enciende el timer para controlar Led
//**********************************************************************
void timer_on(void)
{

    TCNT0 = 0; // Registro de 8 bits que lleva el conteo del timer_0
 102:	16 bc       	out	0x26, r1	; 38
    //Prescaler configurado en 1024
    TCCR0B |=  (1<<CS00);// 1 en el bit CS00
 104:	85 b5       	in	r24, 0x25	; 37
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 bd       	out	0x25, r24	; 37
    TCCR0B &=~ (1<<CS01);// 0 en el bit CS01
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	85 bd       	out	0x25, r24	; 37
    TCCR0B |=  (1<<CS02);// 1 en el bit CS02
 110:	85 b5       	in	r24, 0x25	; 37
 112:	84 60       	ori	r24, 0x04	; 4
 114:	85 bd       	out	0x25, r24	; 37
 116:	08 95       	ret

00000118 <main>:
	
/*******************Programa principal*********************/
int main(void)
{
	//--Inicialización
	cli(); //Deshabilitamos interrupciones
 118:	f8 94       	cli
	initialize_ports(); // va hacía la inicialización de puertos
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_ports>
	initialize_timer();// va hacía la inicialización del TIMER para controlar Led
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <initialize_timer>
	sei(); //Habilitamos interrupciones
 122:	78 94       	sei
	
	timer_on(); //Encendemos Timer0
 124:	0e 94 81 00 	call	0x102	; 0x102 <timer_on>

	//--Ejecución
	while (1) //loop infinito
	{
		
		if (bit_is_clear(PIND,ButtonSpeed)){
 128:	48 99       	sbic	0x09, 0	; 9
 12a:	04 c0       	rjmp	.+8      	; 0x134 <main+0x1c>
			speed = 5;
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <speed>
 132:	03 c0       	rjmp	.+6      	; 0x13a <main+0x22>
		}else{
			speed = 10;
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <speed>
		}
		
		PORTB = numeros[i];
 13a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <i>
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 81       	ld	r24, Z
 146:	85 b9       	out	0x05, r24	; 5
		
		if (i == 10) {
 148:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <i>
 14c:	8a 30       	cpi	r24, 0x0A	; 10
 14e:	61 f7       	brne	.-40     	; 0x128 <main+0x10>
			i = 0;
 150:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <i>
 154:	e9 cf       	rjmp	.-46     	; 0x128 <main+0x10>

00000156 <__vector_14>:
//**********************************************************************
//**********************************************************************
//TIMER_0
//**********************************************************************
ISR (TIMER0_COMPA_vect)// Vector de interrupción para el Timer0 (0.1s)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
   timer++;
 164:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
   if(timer == speed){ 
 16e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 172:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <speed>
 176:	98 13       	cpse	r25, r24
 178:	07 c0       	rjmp	.+14     	; 0x188 <__vector_14+0x32>
	   i++;
 17a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <i>
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <i>
	   timer = 0;
 184:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
   }
   
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
